// user.service
// get function===>
// const getAllUsers = async (query: Record<string, unknown>) => {
//   const {
//     searchTerm,
//     page,
//     limit,
//     sortBy = 'createdAt',
//     order = 'desc',
//     ...filterData
//   } = query;
//   const anyConditions: any[] = [];

//   if (searchTerm) {
//     anyConditions.push({
//       $or: [{ fullName: { $regex: searchTerm, $options: 'i' } }],
//     });
//   }

//   if (Object.keys(filterData).length > 0) {
//     const filterConditions = Object.entries(filterData).map(
//       ([field, value]) => ({
//         [field]: value,
//       })
//     );
//     anyConditions.push({ $and: filterConditions });
//   }

//   anyConditions.push({ role: USER_ROLES.USER });

//   // Apply filter conditions
//   const whereConditions =
//     anyConditions.length > 0 ? { $and: anyConditions } : {};
//   const pages = parseInt(page as string) || 1;
//   const size = parseInt(limit as string) || 10;
//   const skip = (pages - 1) * size;

//   // Set default sort order to show new data first
//   const sortOrder: SortOrder = order === 'desc' ? -1 : 1;
//   const sortCondition: { [key: string]: SortOrder } = {
//     [sortBy as string]: sortOrder,
//   };

//   const result = await User.find(whereConditions)
//     .sort(sortCondition)
//     .skip(skip)
//     .limit(size)
//     .lean();

//   // Format the `updatedAt` field
//   const formattedResult = result.map((user: any) => {
//     if (user.updatedAt) {
//       const date = new Date(user.updatedAt);
//       user.updatedAt = date.toISOString().split('T')[0];
//     }
//     return user;
//   });

//   const count = await User.countDocuments(whereConditions);

//   const data: any = {
//     result: formattedResult,
//     meta: {
//       page: pages,
//       limit: size,
//       total: count,
//       totalPages: Math.ceil(count / size),
//       currentPage: pages,
//     },
//   };
//   return data;
// };

//blog.service
// const getAllBlogs = async (query: Record<string, unknown>) => {
//     const {
//       searchTerm,
//       page,
//       limit,
//       sortBy = 'createdAt',
//       order = 'desc',
//       ...filterData
//     } = query;
//     const anyConditions: any[] = [];

//     if (searchTerm) {
//       anyConditions.push({
//         $or: [
//           { title: { $regex: searchTerm, $options: 'i' } },
//           { des: { $regex: searchTerm, $options: 'i' } },
//         ],
//       });
//     }

//     if (Object.keys(filterData).length > 0) {
//       const filterConditions = Object.entries(filterData).map(
//         ([field, value]) => ({
//           [field]: value,
//         })
//       );
//       anyConditions.push({ $and: filterConditions });
//     }

//     // Apply filter conditions
//     const whereConditions =
//       anyConditions.length > 0 ? { $and: anyConditions } : {};
//     const pages = parseInt(page as string) || 1;
//     const size = parseInt(limit as string) || 10;
//     const skip = (pages - 1) * size;

//     // Set default sort order to show new data first
//     const sortOrder: SortOrder = order === 'desc' ? -1 : 1;
//     const sortCondition: { [key: string]: SortOrder } = {
//       [sortBy as string]: sortOrder,
//     };

//     const result = await Blog.find(whereConditions)
//       .sort(sortCondition)
//       .skip(skip)
//       .limit(size);
//     const count = await Blog.countDocuments(whereConditions);

//     const data: any = {
//       result,
//       meta: {
//         page: pages,
//         limit: size,
//         total: count,
//         totalPages: Math.ceil(count / size),
//         currentPage: pages,
//       },
//     };
//     return data;
//   };

//faq.service
// const getAllFaq = async (query: Record<string, unknown>) => {
//   const {
//     searchTerm,
//     page,
//     limit,
//     sortBy = 'createdAt',
//     order = 'desc',
//     ...filterData
//   } = query;
//   const anyConditions: any[] = [];

//   if (searchTerm) {
//     anyConditions.push({
//       $or: [
//         { answer: { $regex: searchTerm, $options: 'i' } },
//         { answerquestion: { $regex: searchTerm, $options: 'i' } },
//       ],
//     });
//   }

//   if (Object.keys(filterData).length > 0) {
//     const filterConditions = Object.entries(filterData).map(
//       ([field, value]) => ({
//         [field]: value,
//       })
//     );
//     anyConditions.push({ $and: filterConditions });
//   }

//   // Apply filter conditions
//   const whereConditions =
//     anyConditions.length > 0 ? { $and: anyConditions } : {};
//   const pages = parseInt(page as string) || 1;
//   const size = parseInt(limit as string) || 10;
//   const skip = (pages - 1) * size;

//   // Set default sort order to show new data first
//   const sortOrder: SortOrder = order === 'desc' ? -1 : 1;
//   const sortCondition: { [key: string]: SortOrder } = {
//     [sortBy as string]: sortOrder,
//   };

//   const result = await Faq.find(whereConditions)
//     .sort(sortCondition)
//     .skip(skip)
//     .limit(size);
//   const count = await Faq.countDocuments(whereConditions);

//   const data: any = {
//     result,
//     meta: {
//       page: pages,
//       limit: size,
//       total: count,
//       totalPages: Math.ceil(count / size),
//       currentPage: pages,
//     },
//   };
//   return data;
// };

//product.service
// const hello = async (query: Record<string, unknown>) => {
//   const {
//     searchTerm,
//     page,
//     limit,
//     sortBy = 'createdAt',
//     order = 'desc',
//     ...filterData
//   } = query;
//   const anyConditions: any[] = [];

//   if (searchTerm) {
//     anyConditions.push({
//       $or: [
//         { name: { $regex: searchTerm, $options: 'i' } },
//         { description: { $regex: searchTerm, $options: 'i' } },
//       ],
//     });
//   }

//   if (Object.keys(filterData).length > 0) {
//     const filterConditions = Object.entries(filterData).map(
//       ([field, value]) => ({
//         [field]: value,
//       })
//     );
//     anyConditions.push({ $and: filterConditions });
//   }

//   // Apply filter conditions
//   const whereConditions =
//     anyConditions.length > 0 ? { $and: anyConditions } : {};
//   const pages = parseInt(page as string) || 1;
//   const size = parseInt(limit as string) || 10;
//   const skip = (pages - 1) * size;

//   // Set default sort order to show new data first
//   const sortOrder: SortOrder = order === 'desc' ? -1 : 1;
//   const sortCondition: { [key: string]: SortOrder } = {
//     [sortBy as string]: sortOrder,
//   };

//   const result = await Product.find(whereConditions)
//     .populate('category', 'name')
//     .sort(sortCondition)
//     .skip(skip)
//     .limit(size)
//     .lean();
//   const count = await Product.countDocuments(whereConditions);

//   const data: any = {
//     result,
//     meta: {
//       page: pages,
//       limit: size,
//       total: count,
//       totalPages: Math.ceil(count / size),
//       currentPage: pages,
//     },
//   };
//   return data;
// };
